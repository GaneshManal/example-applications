/**
    * Name: HostNwInterface
    * Purpose: Reads the AVRO Schema data generated by producer ( random data ) considering network interface as data source.
    *           It generates source, interface name, RX bytes, TX bytes and time stamp periodically as received from producer.
    * Author: PNDA team
    *
    * Created: 30/05/2018
*/

package com.cisco.pnda.examples;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HostNwInterface extends org.apache.avro.specific.SpecificRecordBase
		implements org.apache.avro.specific.SpecificRecord {

	private static final long serialVersionUID = -4372457208513393133L;

	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
			"{\"type\":\"record\",\"name\":\"HostNwInterface\",\"namespace\":\"com.cisco.pnda\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"}, {\"name\":\"source\",\"type\":\"string\"}, {\"name\":\"rawData\",\"type\":\"string\"}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	public Long timestamp;
	public String source;
	public String rawData;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public HostNwInterface() {
	}

	/**
	 * All-args constructor.
	 */
	public HostNwInterface(String source, Long timestamp, String rawData) {
		this.source = source;
		this.timestamp = timestamp;
		this.rawData = rawData;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public Object get(int field$) {
		switch (field$) {
		case 0:
			return timestamp;
		case 1:
			return source;
		case 2:
			return rawData;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, Object value$) {
		switch (field$) {
		case 0:
			timestamp = (Long) value$;
			break;
		case 1:
			source = (String) value$.toString();
			break;
		case 2:
			rawData = (String) value$.toString();
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'time' field.
	 * 
	 * @return The value of the 'time' field.
	 */
	public Long getTimestamp() {
		return timestamp;
	}

	/**
	 * Sets the value of the 'time' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setTimestamp(Long value) {
		this.timestamp = value;
	}

	/**
	 * Gets the value of the 'source' field.
	 * 
	 * @return The value of the 'source' field.
	 */
	public String getSource() {
		return source;
	}

	/**
	 * Sets the value of the 'source' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setSource(String value) {
		this.source = value;
	}

	/**
	 * Gets the value of the 'rawData' field.
	 * 
	 * @return The value of the 'rawData' field.
	 */
	public String getRawData() {
		return rawData;
	}

	/**
	 * Sets the value of the 'rawData' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setRawData(String value) {
		this.rawData = value;
	}

	/**
	 * Creates a new Network interface RecordBuilder.
	 * 
	 * @return A new network interface RecordBuilder
	 */
	public static com.cisco.pnda.examples.HostNwInterface.Builder newBuilder() {
		return new com.cisco.pnda.examples.HostNwInterface.Builder();
	}

	/**
	 * Creates a network interface RecordBuilder by copying an existing Builder.
	 * 
	 * @param other
	 *            The existing builder to copy.
	 * @return A new network interface RecordBuilder
	 */
	public static com.cisco.pnda.examples.HostNwInterface.Builder newBuilder(
			com.cisco.pnda.examples.HostNwInterface.Builder other) {
		return new com.cisco.pnda.examples.HostNwInterface.Builder(other);
	}

	/**
	 * Creates a new HostNwInterface RecordBuilder by copying an existing
	 * HostNwInterface instance.
	 * 
	 * @param other
	 *            The existing instance to copy.
	 * @return A new HostNwInterface RecordBuilder
	 */
	public static com.cisco.pnda.examples.HostNwInterface.Builder newBuilder(
			com.cisco.pnda.examples.HostNwInterface other) {
		return new com.cisco.pnda.examples.HostNwInterface.Builder(other);
	}

	/**
	 * RecordBuilder for HostNwInterface instances.
	 */
	public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HostNwInterface>
			implements org.apache.avro.data.RecordBuilder<HostNwInterface> {

		private Long timestamp;
		private String source;
		private String rawData;

		/** Creates a new Builder */
		private Builder() {
			super(SCHEMA$);
		}

		/**
		 * Creates a Builder by copying an existing Builder.
		 * 
		 * @param other
		 *            The existing Builder to copy.
		 */
		private Builder(com.cisco.pnda.examples.HostNwInterface.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.timestamp)) {
				this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.source)) {
				this.source = data().deepCopy(fields()[1].schema(), other.source);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.rawData)) {
				this.rawData = data().deepCopy(fields()[2].schema(), other.rawData);
				fieldSetFlags()[1] = true;
			}
		}

		/**
		 * Creates a Builder by copying an existing HostNwInterface instance
		 * 
		 * @param other
		 *            The existing instance to copy.
		 */
		private Builder(com.cisco.pnda.examples.HostNwInterface other) {
			super(SCHEMA$);
			if (isValidValue(fields()[0], other.timestamp)) {
				this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.source)) {
				this.source = data().deepCopy(fields()[1].schema(), other.source);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.rawData)) {
				this.rawData = data().deepCopy(fields()[2].schema(), other.rawData);
				fieldSetFlags()[2] = true;
			}
		}

		/**
		 * Gets the value of the 'time-stamp' field.
		 * 
		 * @return The value.
		 */
		public Long getTimestamp() {
			return timestamp;
		}

		/**
		 * Sets the value of the 'time-stamp' field.
		 * 
		 * @param value
		 *            The value of 'time-stamp'.
		 * @return This builder.
		 */
		public com.cisco.pnda.examples.HostNwInterface.Builder setTimestamp(Long value) {
			validate(fields()[0], value);
			this.timestamp = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/**
		 * Checks whether the 'time-stamp' field has been set.
		 * 
		 * @return True if the 'time-stamp' field has been set, false otherwise.
		 */
		public boolean hasTimestamp() {
			return fieldSetFlags()[0];
		}

		/**
		 * Clears the value of the 'time-stamp' field.
		 * 
		 * @return This builder.
		 */
		public com.cisco.pnda.examples.HostNwInterface.Builder clearTimestamp() {
			fieldSetFlags()[0] = false;
			return this;
		}

		/**
		 * Gets the value of the 'source' field.
		 * 
		 * @return The value.
		 */
		public String getSource() {
			return source;
		}

		/**
		 * Sets the value of the 'source' field.
		 * 
		 * @param value
		 *            The value of 'source'.
		 * @return This builder.
		 */
		public com.cisco.pnda.examples.HostNwInterface.Builder setSource(String value) {
			validate(fields()[1], value);
			this.source = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/**
		 * Checks whether the 'source' field has been set.
		 * 
		 * @return True if the 'source' field has been set, false otherwise.
		 */
		public boolean hasSource() {
			return fieldSetFlags()[1];
		}

		/**
		 * Clears the value of the 'source' field.
		 * 
		 * @return This builder.
		 */
		public com.cisco.pnda.examples.HostNwInterface.Builder clearSource() {
			fieldSetFlags()[1] = false;
			return this;
		}

		/**
		 * Gets the value of the 'rawData' field.
		 * 
		 * @return The value.
		 */
		public String getrawData() {
			return rawData;
		}

		/**
		 * Sets the value of the 'rawData' field.
		 * 
		 * @param value
		 *            The value of 'rawData'.
		 * @return This builder.
		 */
		public com.cisco.pnda.examples.HostNwInterface.Builder setrawData(String value) {
			validate(fields()[2], value);
			this.rawData = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/**
		 * Checks whether the 'rawData' field has been set.
		 * 
		 * @return True if the 'rawData' field has been set, false otherwise.
		 */
		public boolean hasrawData() {
			return fieldSetFlags()[2];
		}

		/**
		 * Clears the value of the 'rawData' field.
		 * 
		 * @return This builder.
		 */
		public com.cisco.pnda.examples.HostNwInterface.Builder clearrawData() {
			fieldSetFlags()[2] = false;
			return this;
		}

		@Override
		public HostNwInterface build() {
			try {
				HostNwInterface record = new HostNwInterface();
				record.timestamp = fieldSetFlags()[0] ? this.timestamp : (Long) defaultValue(fields()[0]);
				record.source = fieldSetFlags()[1] ? this.source : (String) defaultValue(fields()[1]);
				record.rawData = fieldSetFlags()[2] ? this.rawData : (String) defaultValue(fields()[2]);
				return record;
			} catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}

	private static final org.apache.avro.io.DatumWriter WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(
			SCHEMA$);

	@Override
	public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
		WRITER$.write(this, SpecificData.getEncoder(out));
	}

	private static final org.apache.avro.io.DatumReader READER$ = new org.apache.avro.specific.SpecificDatumReader(
			SCHEMA$);

	@Override
	public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
		READER$.read(this, SpecificData.getDecoder(in));
	}
}