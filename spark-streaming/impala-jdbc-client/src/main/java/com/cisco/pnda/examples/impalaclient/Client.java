/**
  * Name:       Client
  * Purpose:    Run SQL statements via Impala JDBC against HBase data generated by the example spark streaming app
  * Author:     PNDA team
  *
  * Created:    07/04/2016
  */

/*
Copyright (c) 2016 Cisco and/or its affiliates.

This software is licensed to you under the terms of the Apache License, Version 2.0 (the "License").
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

The code, technical concepts, and all information contained herein, are the property of Cisco Technology, Inc.
and/or its affiliated entities, under various laws including copyright, international treaties, patent, and/or contract.
Any use of the material herein must be in accordance with the terms of the License. All rights not expressly granted by
the License are reserved.

Unless required by applicable law or agreed to separately in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

*/

package com.cisco.pnda.examples.impalaclient;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public final class Client {

   private Client() {
   }

   private static final String CONNECTION_URL_PROPERTY = "connection.url";
   private static final String JDBC_DRIVER_NAME_PROPERTY = "jdbc.driver.class.name";
   private static final String HBASE_SHARDS_NAME_PROPERTY = "hbase.shards";

   private static String connectionUrl;
   private static String jdbcDriverName;
   private static Integer hbaseShards;

   private static void loadConfiguration() throws IOException {
      String filename = "application.properties";
      InputStream input = Client.class.getClassLoader().getResourceAsStream(filename);
      Properties prop = new Properties();
      prop.load(input);
      connectionUrl = prop.getProperty(CONNECTION_URL_PROPERTY);
      jdbcDriverName = prop.getProperty(JDBC_DRIVER_NAME_PROPERTY);
      hbaseShards = Integer.parseInt(prop.getProperty(HBASE_SHARDS_NAME_PROPERTY));
      input.close();
   }

   public static void main(final String[] args) throws IOException {
      try {
          loadConfiguration();

          System.out.println("usage:");
          System.out.println("Client table_name start_timestamp_ms end_timestamp_ms");
          System.out.println("Client example_table 1452685567000 1452771964000");

          StringBuilder sourceDataSqlStatement = new StringBuilder();

          for (int i = 0; i < hbaseShards; i++) {
            if (sourceDataSqlStatement.length() > 0) {
                sourceDataSqlStatement.append(" union ");
            }
            String startRow = i + "_" + args[1];
            String endRow = i + "_" + args[2];
            sourceDataSqlStatement.append("select * from " + args[0]
                      + " where id between '" + startRow + "' and '" + endRow + "'");
          }
          StringBuilder sqlStatement = new StringBuilder();
          sqlStatement.append("select round(avg(cast(col as int)),2) as average from (");
          sqlStatement.append(sourceDataSqlStatement);
          sqlStatement.append(") t");

          System.out.println("Impala JDBC Example");
          System.out.println("Using Connection URL: " + connectionUrl);
          System.out.println("Running Query: " + sqlStatement);

          Class.forName(jdbcDriverName);
          Connection con = DriverManager.getConnection(connectionUrl);
          Statement stmt = con.createStatement();
          stmt.execute("invalidate metadata");
          ResultSet rs = stmt.executeQuery(sqlStatement.toString());
          while (rs.next()) {
            System.out.println(rs.getString(1));
          }
      } catch (Exception ex) {
          System.out.println("Error: " + ex.getMessage());
      }
   }
}
